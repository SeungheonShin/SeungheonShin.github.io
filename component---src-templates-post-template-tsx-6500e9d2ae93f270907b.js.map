{"version":3,"file":"component---src-templates-post-template-tsx-6500e9d2ae93f270907b.js","mappings":"8NAUA,IAAMA,GAAmB,sKAUnBC,GAAK,kRAcLC,GAAe,6JAWfC,GAAQ,wLA4Bd,EAlBkD,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,WAChE,OACEC,EAAAA,EAAAA,IAACP,EAAD,MACEO,EAAAA,EAAAA,IAACN,EAAD,KAAQG,IACRG,EAAAA,EAAAA,IAACJ,EAAD,MACEI,EAAAA,EAAAA,IAACL,EAAD,KACGI,EAAWE,KAAI,SAACC,GAAD,OACdF,EAAAA,EAAAA,IAACG,EAAAA,GAAD,CAAMC,GAAE,cAAgBF,EAAYG,IAAKH,GACtC,IAAMA,EAFV,MAMHF,EAAAA,EAAAA,IAAAA,MAAAA,KAAMF,IAZd,E,UCjDA,IAAMQ,GAAe,oHAerB,EAT8C,SAAC,GAAiC,IAA/BT,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,WAC5D,OACEC,EAAAA,EAAAA,IAACM,EAAD,MACEN,EAAAA,EAAAA,IAACO,EAAD,CAAcV,MAAOA,EAAOC,KAAMA,EAAMC,WAAYA,KACpDC,EAAAA,EAAAA,IAACQ,EAAAA,EAAD,MAJN,ECLA,IAAMC,GAAgB,+zBAqGtB,EAJgD,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACjD,OAAOV,EAAAA,EAAAA,IAACS,EAAD,CAAkBE,wBAAyB,CAAEC,OAAQF,IAD9D,E,UC7DA,EA5BgC,WAC9B,IAAMG,GAAUC,EAAAA,EAAAA,QAAuB,MAwBvC,OAtBAC,EAAAA,EAAAA,YAAU,WAAO,IAAD,EACd,GAAwB,OAApBF,EAAQG,QAAZ,CAEA,IAAMC,EAAgCC,SAASC,cAAc,UAEvDC,EAAuC,CAC3CC,IAtBM,gCAuBNC,KAtBO,wCAuBP,aAAc,WACdC,MAAO,UACPC,MAAM,cACNC,YAAa,YACbC,MAAO,QAGTC,OAAOC,QAAQR,GAAYS,SAAQ,YAAmB,IAAjBxB,EAAgB,KAAXyB,EAAW,KACnDb,EAAWc,aAAa1B,EAAKyB,EAD/B,IAIA,UAAAjB,EAAQG,eAAR,SAAiBgB,YAAYf,EAlBO,CAD7B,GAoBN,KAEIjB,EAAAA,EAAAA,IAAAA,MAAAA,CAAKiC,IAAKpB,GAzBnB,ECsCA,EA5BkD,SAAC,GAI7C,IACJ,EADI,EAHJqB,KACEC,kBAAqBC,MAeb,GAXRC,KACE3B,EAFJ,EAEIA,KAFJ,IAGI4B,YACEzC,EAJN,EAIMA,MACAC,EALN,EAKMA,KACAC,EANN,EAMMA,WANN,EAOMwC,UACEC,gBAAmBC,gBAM3B,OACEzC,EAAAA,EAAAA,IAAC0C,EAAAA,EAAD,MACE1C,EAAAA,EAAAA,IAAC2C,EAAD,CAAU9C,MAAOA,EAAOC,KAAMA,EAAMC,WAAYA,KAChDC,EAAAA,EAAAA,IAAC4C,EAAD,CAAalC,KAAMA,KACnBV,EAAAA,EAAAA,IAAC6C,EAAD,MAvBN,C","sources":["webpack://gatsby-starter-default/./src/components/Post/PostHeadInfo.tsx","webpack://gatsby-starter-default/./src/components/Post/PostHead.tsx","webpack://gatsby-starter-default/./src/components/Post/PostContent.tsx","webpack://gatsby-starter-default/./src/components/Post/CommentWidget.tsx","webpack://gatsby-starter-default/./src/templates/PostTemplate.tsx"],"sourcesContent":["import React from 'react';\r\nimport styled from '@emotion/styled';\r\nimport { Link } from 'gatsby';\r\n\r\nexport type PostHeadInfoProps = {\r\n  title: string,\r\n  date: string,\r\n  categories: string[],\r\n};\r\n\r\nconst PostHeadInfoWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 20px;\r\n  width: 768px;\r\n  height: 300px;\r\n  margin: 0 auto;\r\n  padding: 60px 0 30px 0;\r\n`;\r\n\r\nconst Title = styled.div`\r\n  display: -webkit-box;\r\n  overflow: hidden;\r\n  overflow-wrap: break-word;\r\n  margin-top: auto;\r\n  text-overflow: ellipsis;\r\n  white-space: normal;\r\n  -webkit-line-clamp: 2;\r\n  -webkit-box-orient: vertical;\r\n  font-size: 36px;\r\n  font-weight: 800;\r\n  color: #f8f8f2;\r\n`;\r\n\r\nconst CategoryWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  gap: 10px;\r\n  color: rgba(248, 248, 242, 0.7);\r\n\r\n  a:hover {\r\n    color: #f8f8f2;\r\n  }\r\n`;\r\n\r\nconst PostData = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-top: 10px;\r\n  font-size: 18px;\r\n  font-weight: 700;\r\n  color: #f8f8f2;\r\n`;\r\n\r\nconst PostHeadInfo: React.FC<PostHeadInfoProps> = ({ title, date, categories }) => {\r\n  return (\r\n    <PostHeadInfoWrapper>\r\n      <Title>{title}</Title>\r\n      <PostData>\r\n        <CategoryWrapper>\r\n          {categories.map((category) => (\r\n            <Link to={`/?category=${category}`} key={category}>\r\n              {'#' + category}\r\n            </Link>\r\n          ))}\r\n        </CategoryWrapper>\r\n        <div>{date}</div>\r\n      </PostData>\r\n    </PostHeadInfoWrapper>\r\n  );\r\n};\r\n\r\nexport default PostHeadInfo;\r\n","import React from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\nimport PostHeadInfo, { PostHeadInfoProps } from 'components/Post/PostHeadInfo';\r\nimport NavBar from 'components/common/NavBar';\r\n\r\nconst PostHeadWrapper = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  background-color: #383a59;\r\n`;\r\n\r\nconst PostHead: React.FC<PostHeadInfoProps> = ({ title, date, categories }) => {\r\n  return (\r\n    <PostHeadWrapper>\r\n      <PostHeadInfo title={title} date={date} categories={categories} />\r\n      <NavBar />\r\n    </PostHeadWrapper>\r\n  );\r\n};\r\n\r\nexport default PostHead;\r\n","import React from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\ninterface PostContentProps {\r\n  html: string;\r\n}\r\n\r\nconst MarkdownRenderer = styled.div`\r\n  font-family: 'Times New Roman';\r\n  // Renderer Style\r\n  flex: 1;\r\n  width: 768px;\r\n  margin: 0 auto;\r\n  padding: 100px 0;\r\n  word-break: break-all;\r\n\r\n  // Markdown Style\r\n  line-height: 1.8;\r\n  font-size: 16px;\r\n  font-weight: 400;\r\n  color: #f8f8f2;\r\n\r\n  // Apply Padding Attribute to All Elements\r\n  p {\r\n    padding: 3px 0;\r\n  }\r\n\r\n  // Adjust Heading Element Style\r\n  h1,\r\n  h2,\r\n  h3 {\r\n    font-weight: 800;\r\n    margin-bottom: 30px;\r\n  }\r\n\r\n  * + h1,\r\n  * + h2,\r\n  * + h3 {\r\n    margin-top: 80px;\r\n  }\r\n\r\n  hr + h1,\r\n  hr + h2,\r\n  hr + h3 {\r\n    margin-top: 0;\r\n  }\r\n\r\n  h1 {\r\n    font-size: 30px;\r\n  }\r\n\r\n  h2 {\r\n    font-size: 25px;\r\n  }\r\n\r\n  h3 {\r\n    font-size: 20px;\r\n  }\r\n\r\n  // Adjust Quotation Element Style\r\n  blockquote {\r\n    margin: 30px 0;\r\n    padding: 5px 15px;\r\n    border-left: 2px solid #000000;\r\n    font-weight: 800;\r\n  }\r\n\r\n  // Adjust List Element Style\r\n  ol,\r\n  ul {\r\n    margin-left: 20px;\r\n    padding: 30px 0;\r\n  }\r\n\r\n  // Adjust Horizontal Rule style\r\n  hr {\r\n    border: 1px solid #000000;\r\n    margin: 100px 0;\r\n  }\r\n\r\n  // Adjust Link Element Style\r\n  a {\r\n    color: #4263eb;\r\n    text-decoration: underline;\r\n  }\r\n\r\n  // Adjust Code Style\r\n  pre[class*='language-'] {\r\n    margin: 30px 0;\r\n    padding: 15px;\r\n    font-size: 15px;\r\n\r\n    ::-webkit-scrollbar-thumb {\r\n      background: rgba(255, 255, 255, 0.5);\r\n      border-radius: 3px;\r\n    }\r\n  }\r\n\r\n  code[class*='language-'],\r\n  pre[class*='language-'] {\r\n    tab-size: 2;\r\n  }\r\n`;\r\n\r\nconst PostContent: React.FC<PostContentProps> = ({ html }) => {\r\n  return <MarkdownRenderer dangerouslySetInnerHTML={{ __html: html }} />;\r\n};\r\n\r\nexport default PostContent;\r\n","import React, { useRef, useEffect } from 'react';\r\n\r\nconst src = 'https://utteranc.es/client.js';\r\nconst repo = 'SeungheonShin/SeungheonShin.github.io';\r\n\r\ntype UtterancesAttributesType = {\r\n  src: string,\r\n  repo: string,\r\n  'issue-term': string,\r\n  label: string,\r\n  theme: string,\r\n  crossorigin: string,\r\n  async: string,\r\n};\r\n\r\nconst CommentWidget: React.FC = () => {\r\n  const element = useRef<HTMLDivElement>(null);\r\n\r\n  useEffect(() => {\r\n    if (element.current === null) return;\r\n\r\n    const utterances: HTMLScriptElement = document.createElement('script');\r\n\r\n    const attributes: UtterancesAttributesType = {\r\n      src,\r\n      repo,\r\n      'issue-term': 'pathname',\r\n      label: 'Comment',\r\n      theme: `photon-dark`,\r\n      crossorigin: 'anonymous',\r\n      async: 'true',\r\n    };\r\n\r\n    Object.entries(attributes).forEach(([key, value]) => {\r\n      utterances.setAttribute(key, value);\r\n    });\r\n\r\n    element.current?.appendChild(utterances);\r\n  }, []);\r\n\r\n  return <div ref={element} />;\r\n};\r\n\r\nexport default CommentWidget;\r\n","import React from 'react';\r\nimport { graphql } from 'gatsby';\r\n\r\nimport Template from 'components/common/Template';\r\nimport PostHead from 'components/Post/PostHead';\r\nimport PostContent from 'components/Post/PostContent';\r\nimport CommentWidget from 'components/Post/CommentWidget';\r\n\r\nimport { PostFrontmatterType } from 'types/PostItem.types';\r\n\r\nexport type PostPageItemType = {\r\n  node: {\r\n    html: string,\r\n    frontmatter: PostFrontmatterType,\r\n  },\r\n};\r\n\r\ntype PostTemplateProps = {\r\n  data: {\r\n    allMarkdownRemark: {\r\n      edges: PostPageItemType[],\r\n    },\r\n  },\r\n};\r\n\r\nconst PostTemplate: React.FC<PostTemplateProps> = ({\r\n  data: {\r\n    allMarkdownRemark: { edges },\r\n  },\r\n}) => {\r\n  const {\r\n    node: {\r\n      html,\r\n      frontmatter: {\r\n        title,\r\n        date,\r\n        categories,\r\n        thumbnail: {\r\n          childImageSharp: { gatsbyImageData },\r\n        },\r\n      },\r\n    },\r\n  } = edges[0];\r\n\r\n  return (\r\n    <Template>\r\n      <PostHead title={title} date={date} categories={categories} />\r\n      <PostContent html={html} />\r\n      <CommentWidget />\r\n    </Template>\r\n  );\r\n};\r\n\r\nexport default PostTemplate;\r\n\r\nexport const queryMarkdownDataBySlug = graphql`\r\n  query queryMarkdownDataBySlug($slug: String) {\r\n    allMarkdownRemark(filter: { fields: { slug: { eq: $slug } } }) {\r\n      edges {\r\n        node {\r\n          html\r\n          frontmatter {\r\n            title\r\n            summary\r\n            date(formatString: \"YYYY.MM.DD.\")\r\n            categories\r\n            thumbnail {\r\n              childImageSharp {\r\n                gatsbyImageData\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n"],"names":["PostHeadInfoWrapper","Title","CategoryWrapper","PostData","title","date","categories","___EmotionJSX","map","category","Link","to","key","PostHeadWrapper","PostHeadInfo","NavBar","MarkdownRenderer","html","dangerouslySetInnerHTML","__html","element","useRef","useEffect","current","utterances","document","createElement","attributes","src","repo","label","theme","crossorigin","async","Object","entries","forEach","value","setAttribute","appendChild","ref","data","allMarkdownRemark","edges","node","frontmatter","thumbnail","childImageSharp","gatsbyImageData","Template","PostHead","PostContent","CommentWidget"],"sourceRoot":""}